require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe IndicationsController do

  def mock_indication(stubs={})
    @mock_indication ||= mock_model(Indication, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all indications as @indications" do
      Indication.stub(:all) { [mock_indication] }
      get :index
      assigns(:indications).should eq([mock_indication])
    end
  end

  describe "GET show" do
    it "assigns the requested indication as @indication" do
      Indication.stub(:find).with("37") { mock_indication }
      get :show, :id => "37"
      assigns(:indication).should be(mock_indication)
    end
  end

  describe "GET new" do
    it "assigns a new indication as @indication" do
      Indication.stub(:new) { mock_indication }
      get :new
      assigns(:indication).should be(mock_indication)
    end
  end

  describe "GET edit" do
    it "assigns the requested indication as @indication" do
      Indication.stub(:find).with("37") { mock_indication }
      get :edit, :id => "37"
      assigns(:indication).should be(mock_indication)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created indication as @indication" do
        Indication.stub(:new).with({'these' => 'params'}) { mock_indication(:save => true) }
        post :create, :indication => {'these' => 'params'}
        assigns(:indication).should be(mock_indication)
      end

      it "redirects to the created indication" do
        Indication.stub(:new) { mock_indication(:save => true) }
        post :create, :indication => {}
        response.should redirect_to(indication_url(mock_indication))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved indication as @indication" do
        Indication.stub(:new).with({'these' => 'params'}) { mock_indication(:save => false) }
        post :create, :indication => {'these' => 'params'}
        assigns(:indication).should be(mock_indication)
      end

      it "re-renders the 'new' template" do
        Indication.stub(:new) { mock_indication(:save => false) }
        post :create, :indication => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested indication" do
        Indication.stub(:find).with("37") { mock_indication }
        mock_indication.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :indication => {'these' => 'params'}
      end

      it "assigns the requested indication as @indication" do
        Indication.stub(:find) { mock_indication(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:indication).should be(mock_indication)
      end

      it "redirects to the indication" do
        Indication.stub(:find) { mock_indication(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(indication_url(mock_indication))
      end
    end

    describe "with invalid params" do
      it "assigns the indication as @indication" do
        Indication.stub(:find) { mock_indication(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:indication).should be(mock_indication)
      end

      it "re-renders the 'edit' template" do
        Indication.stub(:find) { mock_indication(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested indication" do
      Indication.stub(:find).with("37") { mock_indication }
      mock_indication.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the indications list" do
      Indication.stub(:find) { mock_indication }
      delete :destroy, :id => "1"
      response.should redirect_to(indications_url)
    end
  end

end
